apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'



project.group = GROUP
version = VERSION_NAME

dependencies {
    compile('com.squareup.retrofit:retrofit:1.9.0')

    testCompile("org.robolectric:robolectric:${ROBOLECTRIC_VERSION}") {
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testCompile "com.google.guava:guava:${GUAVA_VERSION}"
    testCompile "junit:junit:${JUNIT_VERSION}"
    testCompile "org.easytesting:fest-assert-core:${FEST_ASSERT_CORE_VERSION}"
    testCompile "org.mockito:mockito-core:${MOCKITO_CORE_VERSION}"

    androidTestCompile 'com.android.support.test:runner:1.0.1'
    androidTestCompile 'com.squareup.okhttp:okhttp:2.2.0'
}

apply from: rootProject.file('release.gradle')



android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:27.1.0'
    testCompile 'junit:junit:4.12'
}

android.testOptions.unitTests.all {
    // Configure includes / excludes
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'

    maxHeapSize = '2048m'
    jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'
    maxParallelForks = 4
    forkEvery = 150

    afterTest { descriptor, result ->
        println "Executing test for ${descriptor.name} with result: ${result.resultType}"
    }
}

